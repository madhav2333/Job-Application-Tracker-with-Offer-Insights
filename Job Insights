
-- Job Application Tracker SQL Schema and Queries
-- Technologies: PostgreSQL, SQL, ER Modeling, Triggers

-- Drop existing tables if any (clean start)
DROP TABLE IF EXISTS Applications, Companies, Roles, Offers, Interviews, ResumeKeywords CASCADE;

-- Company Table
CREATE TABLE Companies (
    company_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    industry VARCHAR(50)
);

-- Roles Table
CREATE TABLE Roles (
    role_id SERIAL PRIMARY KEY,
    company_id INT REFERENCES Companies(company_id),
    title VARCHAR(100),
    location VARCHAR(100)
);

-- Applications Table
CREATE TABLE Applications (
    app_id SERIAL PRIMARY KEY,
    role_id INT REFERENCES Roles(role_id),
    date_applied DATE NOT NULL,
    status VARCHAR(50) CHECK (status IN ('Applied', 'Interviewing', 'Offered', 'Rejected')),
    resume_id INT
);

-- Interviews Table
CREATE TABLE Interviews (
    interview_id SERIAL PRIMARY KEY,
    app_id INT REFERENCES Applications(app_id),
    interview_round INT,
    date DATE
);

-- Offers Table
CREATE TABLE Offers (
    offer_id SERIAL PRIMARY KEY,
    app_id INT REFERENCES Applications(app_id),
    offered_salary INT,
    offer_date DATE
);

-- Resume Keywords Table
CREATE TABLE ResumeKeywords (
    resume_id INT,
    keyword VARCHAR(50),
    PRIMARY KEY (resume_id, keyword)
);

-- View: Average time from application to offer
CREATE VIEW AvgAppToOfferTime AS
SELECT c.name AS company,
       ROUND(AVG(o.offer_date - a.date_applied)) AS avg_days_to_offer
FROM Applications a
JOIN Offers o ON a.app_id = o.app_id
JOIN Roles r ON a.role_id = r.role_id
JOIN Companies c ON r.company_id = c.company_id
GROUP BY c.name;

-- View: Interview to offer conversion rate
CREATE VIEW InterviewToOfferRate AS
SELECT c.name AS company,
       COUNT(DISTINCT o.offer_id)::FLOAT / NULLIF(COUNT(DISTINCT i.app_id), 0) AS interview_to_offer_ratio
FROM Interviews i
JOIN Applications a ON i.app_id = a.app_id
JOIN Roles r ON a.role_id = r.role_id
JOIN Companies c ON r.company_id = c.company_id
LEFT JOIN Offers o ON a.app_id = o.app_id
GROUP BY c.name;

-- Trigger: Update status to "Offered" when offer is inserted
CREATE OR REPLACE FUNCTION update_status_to_offered()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE Applications
  SET status = 'Offered'
  WHERE app_id = NEW.app_id;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_offer_insert
AFTER INSERT ON Offers
FOR EACH ROW
EXECUTE FUNCTION update_status_to_offered();

-- Sample insert statements
INSERT INTO Companies (name, industry) VALUES
('Google', 'Tech'),
('Amazon', 'E-commerce');

INSERT INTO Roles (company_id, title, location) VALUES
(1, 'Software Engineer', 'Bangalore'),
(2, 'Data Analyst', 'Hyderabad');

INSERT INTO Applications (role_id, date_applied, status, resume_id) VALUES
(1, '2025-04-01', 'Applied', 101),
(2, '2025-04-05', 'Interviewing', 102);

INSERT INTO Interviews (app_id, interview_round, date) VALUES
(1, 1, '2025-04-10'),
(2, 1, '2025-04-12');

INSERT INTO ResumeKeywords (resume_id, keyword) VALUES
(101, 'SQL'),
(101, 'Python'),
(102, 'AWS'),
(102, 'PostgreSQL');

INSERT INTO Offers (app_id, offered_salary, offer_date) VALUES
(1, 1500000, '2025-04-20');

-- Select example views
SELECT * FROM AvgAppToOfferTime;
SELECT * FROM InterviewToOfferRate;
